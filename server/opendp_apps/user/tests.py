import random, string

from django.contrib.auth import get_user_model

from django.test import TestCase
from django.apps import apps

from opendp_apps.user.models import OpenDPUser, DataverseUser
from opendp_apps.user.serializers import OpenDPUserSerializer


class TestUserSerializer(TestCase):

    fixtures = ['test_dataverses_01.json',
                'test_manifest_params_04.json',
                'test_opendp_users_01.json']

    def setUp(self):
        self.user_obj, _created = get_user_model().objects.get_or_create(username='dv_depositor')

    def test_create(self):
        data = {
            'dv_installation': 1,
            'user': 1,
            'dv_handoff': 1,
            'persistent_id': 1,
            'username': 'test_1',
            'email': 'test@test.com',
            'first_name': 'test',
            'last_name': 'test',
            'dv_general_token': '1234'
        }
        user = OpenDPUserSerializer(data=data)
        is_valid = user.is_valid()
        self.assertEqual(is_valid, True)
        self.assertEqual(user.errors, {})
        user.save()
        for k, v in user.validated_data.items():
            self.assertEquals(data.get(k), v)

        self.assertIsNotNone(OpenDPUser.objects.first())

    def test_delete_opendp_dv_users(self):
        """This mocks some of the clode using in the "clear_test_data.py" script"""
        opendp_user_model = apps.get_model('user', 'OpenDPUser')

        # Rename existing OpenDP User connected to a DV User which is generated by the fixtures
        #
        u1 = opendp_user_model.objects.get(username='test')
        u1.username = 'test_user'
        u1.save()

        eeyore = opendp_user_model(username='eeyore',
                                   first_name='Eeyore',
                                   last_name='(no lname)', email='eeyore@hundredacres.edu')
        eeyore.save()

        dv_eeyore = DataverseUser(user=eeyore,
                             dv_installation=apps.get_model('dataverses', 'RegisteredDataverse').objects.first(),
                             persistent_id=''.join(random.choices(string.ascii_uppercase + string.digits, k=8)),
                             first_name=eeyore.first_name,
                             last_name=eeyore.last_name,
                             email=eeyore.email)
        dv_eeyore.save()


        # get a reference to the DataverseUser model
        ye_model = apps.get_model('user', 'DataverseUser')

        # retrieve the DataverseUser object ids
        opendp_user_ids = list(
            ye_model.objects.exclude(user__username__in=['test_user', 'dev_admin']).values_list('user__id', flat=True))

        # get a reference to the OpenDPUser model
        opendp_user_model = apps.get_model('user', 'OpenDPUser')

        # Delete OpenDPUser objects and their related DataverseUser object based on the "opendp_user_ids"
        (del_cnt, del_details) = opendp_user_model.objects.filter(id__in=opendp_user_ids).delete()

        self.assertEqual(del_cnt, 2)
        self.assertEqual(del_details, {'user.DataverseUser': 1, 'user.OpenDPUser': 1})

